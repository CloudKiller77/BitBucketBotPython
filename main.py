import logging

import urllib3
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ParseMode, Message
from aiogram.utils.markdown import text, bold, code
from urllib3.exceptions import InsecureRequestWarning

import bitBacketUtils
import utils
import jsonWork
from currency import ExchangeCurrency
from keyboards import kb_client
from apscheduler.schedulers.asyncio import AsyncIOScheduler

TOKEN = utils.TOKEN
repository = bitBacketUtils.REPO_NAME
project = bitBacketUtils.PROJECT_NAME

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()
# -1001664997152

global user_id
global mess
size_2 = jsonWork.read_last_count()["last_count"]

# Configure logging
logging.root.handlers = []
# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Ñ–∞–π–ª
logging.basicConfig(filename='bot_info.log',
                    filemode="w",
                    format='%(asctime)s : %(levelname)s : %(message)s',
                    level=logging.INFO)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –û–®–ò–ë–û–ö –≤ –∫–æ–Ω—Å–æ–ª–∏
console = logging.StreamHandler()
console.setLevel(logging.ERROR)
# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
formatter = logging.Formatter('%(asctime)s : %(levelname)s : %(message)s')
console.setFormatter(formatter)
logging.getLogger("").addHandler(console)

# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ InsecureRequestWarning
urllib3.disable_warnings(InsecureRequestWarning)


async def start(_):
    """
    –ò–Ω—Ñ–æ –∫–æ–º–∞–Ω–¥–∞ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–≤—ã–≤–æ–¥–∏—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å), –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    schedule_jobs()
    print("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç)")


@dp.message_handler(commands=['start', 'help'])
async def start_bot(message: types.Message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞, –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏ –∏–Ω—Ñ–æ –æ –±–æ—Ç–µ
    """
    try:
        msg = text(code("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç BitBucket\n") +
                    code("–î–ª—è –ø—Ä–æ–µ–∫—Ç–∞:  ") + bold(project.upper() + "\n") +
                    code("–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è:  ") + bold(repository + "\n") +
                    code("–ù–∞–∂–º–∏—Ç–µ, –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:   ") + bold("/requests") + "\n" +
                    code("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç:  ") + bold("/currency"))

        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_client)
    except:
        await message.reply("–í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –±–æ—Ç—É, –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç –≤ –õ–°!!!")


@dp.message_handler(commands=['currency'])
async def send_today_currency(message: types.Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ö—É—Ä—Å–∞ –≤—ã–ª—é—Ç –Ω–∞ —Ç–µ–∫—É—à–∏–π –¥–µ–Ω—å

    :currency –ö—É—Ä—Å –≤–∞–ª—é—Ç (59.8378)
    :param message: –∫–ª–∞—Å—Å Message –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    :return: currency –ö—É—Ä—Å –≤–∞–ª—é—Ç (59.8378)
    """
    try:
        currency = ExchangeCurrency()
        msg = text(code("üìå –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n") +
                   currency.get_currency_info())
        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN, reply_markup=kb_client)
    except:
        await message.reply("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")


@dp.message_handler(commands=['branches'])
async def send_group_open_requests(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ Pull-requests –≤ –≥—Ä—É–ø–ø—É

    :param message: –∫–ª–∞—Å—Å Message –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    size = bitBacketUtils.get_size_pull_requests()
    try:
        msg = text("üî• –£ –≤–∞—Å –µ—Å—Ç—å - " + bold(str(size)) + " Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN:\n")
        await bot.send_message(message.chat.id, msg, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.reply("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")

    try:
        if size == 0:
            msg = text("Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN –Ω–µ—Ç—É")
            await bot.send_message(message.chat.id, msg, parse_mode=ParseMode.MARKDOWN)
        else:
            for request in bitBacketUtils.get_open_pull_requests():
                mess = text("üîπ –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " + bold(request["–ò–º—è –∞–≤—Ç–æ—Ä–∞"]) + "\n"
                            "üîπ –ò–º—è –≤–µ—Ç–∫–∏:  " + request["Commit branch"].replace("_", " ") + "\n"                                   
                            "–°–æ—Å—Ç–æ—è–Ω–∏–µ:  " + code(request["–°–æ—Å—Ç–æ—è–Ω–∏–µ"]) + "\n"                         
                            "üëâ –ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:  " + bold(str(request["–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"])) + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " + bold(str(request["–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])) + "\n"                                                              
                            "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è): ", request["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è)"])
                await bot.send_message(message.chat.id, mess, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.reply("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")


@dp.message_handler(commands=['requests'])
async def send_open_pull_requests(message: Message):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ Pull-requests –≤ –ª–∏—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param message: –∫–ª–∞—Å—Å Message –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    size = bitBacketUtils.get_size_pull_requests()
    try:
        msg = text("üî• –£ –≤–∞—Å –µ—Å—Ç—å - " + bold(str(size)) + " Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN:\n")
        await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.reply("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")

    try:
        if size == 0:
            msg = text("Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN –Ω–µ—Ç")
            await bot.send_message(message.from_user.id, msg, parse_mode=ParseMode.MARKDOWN)
        else:
            for request in bitBacketUtils.get_open_pull_requests():
                mess = text("üîπ –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " + bold(request["–ò–º—è –∞–≤—Ç–æ—Ä–∞"]) + "\n"
                            "üîπ –ò–º—è –≤–µ—Ç–∫–∏:  " + request["Commit branch"].replace("_", " ") + "\n"                                   
                            "–°–æ—Å—Ç–æ—è–Ω–∏–µ:  " + code(request["–°–æ—Å—Ç–æ—è–Ω–∏–µ"]) + "\n"                         
                            "–†–æ–ª—å:  " + code(request["–†–æ–ª—å"]) + "\n"
                            "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏:  " + code(request["–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏"]) + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:  " + bold(str(request["–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"])) + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " + bold(str(request["–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])) + "\n"
                            "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è): ", request["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è)"])
                await bot.send_message(message.from_user.id, mess, parse_mode=ParseMode.MARKDOWN)
    except:
        await message.reply("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")


async def scheduler_start(message: Message):
    """
    –í—ã–≤–æ–¥ Pull-requests –≤ –≥—Ä—É–ø–ø—É –ø–æ –≥—Ä–∞—Ñ–∏–∫—É

    :param size: –ö–æ–ª-–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–∞—Å—Å–∏–≤–µ —Å —Ä–µ–∫–≤–µ—Å—Ç–∞–º–∏
    :param message: –∫–ª–∞—Å—Å Message –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
                    —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    :param mess: –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–≤–µ—Å—Ç–æ–º
    """
    size = bitBacketUtils.get_size_pull_requests()
    global size_2

    try:
        if size > size_2:
            try:
                msg = text("üî• –£ –≤–∞—Å –µ—Å—Ç—å - " + bold(str(size)) + " Pull requests –≤ —Å—Ç–∞—Ç—É—Å–µ OPEN:\n")
                await bot.send_message("id –≥—Ä—É–ø–ø—ã", msg, parse_mode=ParseMode.MARKDOWN)
            except:
                await message.reply("‚ùó –í–ê–ñ–ù–û: –í–∞–º –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å—Å—è –∫ –±–æ—Ç—É, –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–¥—É—Ç –≤ –õ–°!!!")

            for request in bitBacketUtils.get_open_pull_requests():
                mess = text("üîπ –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " + bold(request["–ò–º—è –∞–≤—Ç–æ—Ä–∞"]) + "\n"
                            "üîπ –ò–º—è –≤–µ—Ç–∫–∏:  " + request["Commit branch"].replace("_", " ") + "\n"
                            "–°–æ—Å—Ç–æ—è–Ω–∏–µ:  " + code(request["–°–æ—Å—Ç–æ—è–Ω–∏–µ"]) + "\n"
                            "–†–æ–ª—å:  " + code(request["–†–æ–ª—å"]) + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫:  " + bold(str(request["–ö–æ–ª-–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫"])) + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " + bold(str(request["–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])) + "\n"
                            "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è): ", request["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è)"])
                await bot.send_message("id –≥—Ä—É–ø–ø—ã", mess, parse_mode=ParseMode.MARKDOWN)
            print("Wow " + str(size) + " " + str(size_2))
            size_2 = size
            jsonWork.write_last_count("last_count", size_2)
        else:
            size_2 = size
            jsonWork.write_last_count("last_count", size_2)
        print(str(size) + " " + str(size_2))
    except:
        await message.reply("‚ùó –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É! –ò–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ—Å—å –∫ –±–æ—Ç—É!")
        print("Error")

    await send_info_about_comment(size, bitBacketUtils.get_new_comment_request())


async def send_info_about_comment(size: int, list_requests: list):
    try:
        if size > 0:
            for request in list_requests:
                mess = text("üî• –£ –≤–∞—Å –µ—Å—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!!!\n" + "\n"
                            "‚ùá –ò–º—è –∞–≤—Ç–æ—Ä–∞:  " + bold(request["–ò–º—è –∞–≤—Ç–æ—Ä–∞"]) + "\n"
                            "‚ùá –ò–º—è –≤–µ—Ç–∫–∏:  " + request["Commit branch"].replace("_", " ") + "\n"
                            "üëâ –ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:  " + bold(str(request["–ö–æ–ª-–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤"])) + "\n"
                            "üôè –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è):  ", request["–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –º–µ–Ω—è)"])
                await bot.send_message("id –≥—Ä—É–ø–ø—ã", mess, parse_mode=ParseMode.MARKDOWN)
        else:
            print("–ù–µ—Ç —Ä–µ–∫–≤–µ—Å—Ç–æ–≤")
    except:
        print("Error")


def schedule_jobs():
    """
    –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ Pull-reauests –≤ –≥—Ä—É–ø–ø—É

    :param scheduler: –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è (—Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥)
    :return: –°–æ–æ–±—â–∞–µ—Ç –æ Pull-requests –≤ –≥—Ä—É–ø–ø—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    """
    scheduler.add_job(scheduler_start,
                      "interval",
                      minutes=2,
                      args=(Message,))


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    scheduler.start()
    executor.start_polling(dp,
                           skip_updates=True,
                           timeout=10000,
                           on_startup=start)
